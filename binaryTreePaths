class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> result = new ArrayList<>();
        List<Integer> path = new ArrayList<>();

        getAllBinaryTreePath(root, result, path);
        return result;
    }
    
    private void getAllBinaryTreePath(TreeNode node, List<String> result, List<Integer> path) {
        if (node == null) {
            return;
        }

        path.add(node.val);

        if (node.left == null && node.right == null) {
            result.add(createPath(path));
        } else {
            getAllBinaryTreePath(node.left, result, path);
            getAllBinaryTreePath(node.right, result, path);
        }

        path.remove(path.size() - 1);
    }
    
    private String createPath(List<Integer> path) {
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < path.size(); i++) {
            sb.append(path.get(i));

            if (i != path.size() - 1) {
                sb.append("->");
            }
        }

        return sb.toString();
    }
}
